#include <iostream>
#include <math.h>

//Problem 2 (COMPLETE)
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

//NOTES
//o Binets Formula to generate the nth Fibonacci number
// 	((1+sqrt(5)/2)^n - (1-sqrt(5)/2)^n)/(sqrt(5))
//o Every third value of the Fibonacci sequence is even, rest are odd (Can be proved by induction)
//o Problem starts 1,2,3... rather than 1,1,2,3... as normal

//Function which calculates the even Fibonacci numbers (2nd, 5th, 8th....) and sums them
void SumOfEvenFibs(long MaxValueGiven){
	
	long SumOfEvenFibs = 0.0;
	long GeneratedFib = 0.0;
	int ModulusCounter = 0;
	int n = 1;
	
	while (GeneratedFib < MaxValueGiven){
		
		if(ModulusCounter % 3 == 1){
			GeneratedFib = (pow(((1+sqrt(5))/2),n+1) - pow(((1-sqrt(5))/2),n+1))/(sqrt(5));
			
			if(GeneratedFib > MaxValueGiven){
				break;
			}
			
			SumOfEvenFibs += GeneratedFib;
			//std::cout << GeneratedFib << "\n";
		}
		ModulusCounter++;
		n++;
	}
	
	std::cout << SumOfEvenFibs << "\n";
	return 0;
}



int main() {
	long MaxValueGiven = 4000000;
	
	SumOfEvenFibs(MaxValueGiven);
		
		
}
