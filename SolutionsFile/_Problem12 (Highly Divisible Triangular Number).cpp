#include <iostream>
#include <math.h>
#include "mVector.h"

//Problem 12 (COMPLETE)
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//				1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
//		1: 1
//		3: 1,3
//		6: 1,2,3,6
//		10: 1,2,5,10
//		15: 1,3,5,15
//		21: 1,3,7,21
//		28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?

//NOTES
//o Sum from 1 to n = n(n+1)/2
//o Can use a modified version of Prime Factorisation function from Problem 3 to create divisor product
//o Number of divisors equals the product of the exponents a_k plus one. D(n) = Product(a_k+1)
//		i.e. 28 has prime factorisation 2^2*7, so has exponents 2 and 1. Thus number of divisors 	= (2+1)*(1+1) = 6




//Function which calculates the number of divisors of a given integer
int NumberOfDivisors(int TestNumber){
	//Storage for Prime Factors and a list of exponents for each prime factor
	MVector PrimeFactors(0);
	MVector ExponentsVector(1);
	
	int exponent = 0;
	int NumOfDivisors = 1;
	
	//Divide by 2 until number is no longer even
	while(TestNumber % 2 == 0){
		PrimeFactors.resize(PrimeFactors.size()+1);
		PrimeFactors[PrimeFactors.size()-1] = 2;
		TestNumber = TestNumber / 2;
		exponent = exponent+1;
	}
	
	ExponentsVector[0] = exponent;
	
	
	//Run through odd values up to sqrt(TestNumber) and check if divisible by remaining amount of TestNumber
	for(int i = 3; i < TestNumber; i+=2){
		exponent = 0;
		while(TestNumber % i == 0){
			PrimeFactors.resize(PrimeFactors.size()+1);
			PrimeFactors[PrimeFactors.size()-1] = i;
			TestNumber = TestNumber / i;
			exponent = exponent+1;
		}
		ExponentsVector.resizePlusOne();
		ExponentsVector[ExponentsVector.size()-1] = exponent;
	}
	
	//Remaining TestNumber is prime, so add to PrimeFactors vector (1 not prime)
	if(TestNumber != 1){
		PrimeFactors.resize(PrimeFactors.size()+1);
		PrimeFactors[PrimeFactors.size()-1] = TestNumber;
		ExponentsVector.resizePlusOne();
		ExponentsVector[ExponentsVector.size()-1] = 1;
	}
		
	//Calculates number of divisors
	for(int i = 0; i < ExponentsVector.size(); i++){
		NumOfDivisors *= (ExponentsVector[i] + 1);
	}
	return NumOfDivisors;
}



int main() {
	
	//Insert selected number of divisors
	int DesiriedNumberOfDivisors = 500;
	
	int NumOfDivisors = 0;
	int TriangleNum = 0;
	int i = 1;

	//Generates triangle numbers in TriangleNum variable
	while(NumOfDivisors < DesiriedNumberOfDivisors){
		TriangleNum += i;
		i++;
		
		NumOfDivisors = NumberOfDivisors(TriangleNum);
	}
	
	//Output to user
	std::cout << "The first triangle number with " << DesiriedNumberOfDivisors << " or more divisors is " << TriangleNum << "\n";
	
}
