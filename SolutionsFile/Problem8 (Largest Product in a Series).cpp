#include <iostream>
#include <math.h>
#include <string>
#include "mVector.h"

//Problem 8 (INCOMPLETE)
//The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
//7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
//Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

//NOTES
//o Convert string characters from ascii to numeric by 	"val = ascii - '0'"



//Function which takes in a test string and a size of adjacent digits to be multiplied and returns the maximal product of such adjacent blocks.
long long LargestProductInString(std::string TestString, int AdjacencyAmount){
	TestString = TestString.c_str();
	
	long long CurrentProduct = 1;
	long long MaxProduct = 0;
	
	//Check to ensure AdjacencyAmount positive
	if(AdjacencyAmount < 1){
		std::cout << "ERROR: Variable AdjacencyAmount must be > 0 \n";
		exit(-1);
	}
	
	//run through the string from index 0 to TestString.length() - AdjacencyAmount + 1 and calculate the respective product. Update if larger than current largest
	for(int i = 0; i < TestString.length() - AdjacencyAmount + 1; i++){
		CurrentProduct = 1;
		for(int j = 0; j < AdjacencyAmount; j++){
			CurrentProduct = CurrentProduct * (TestString[i+j] - '0');
		}
		if(CurrentProduct > MaxProduct){
			MaxProduct = CurrentProduct;
		}
	}
	
	//Output to user
	std::cout << "The maximum product of " << AdjacencyAmount << " consecutive terms in this string is "<< MaxProduct << ".\n";
	
	return MaxProduct;
}



int main() {
	
	//String to be searched
	std::string TestString = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
	
	//Length of adjacent digits to be multiplied
	int AdjacencyAmount = 13;
	long long MaxProduct = 0;
	
	//Function call
	MaxProduct = LargestProductInString(TestString, AdjacencyAmount);
}
