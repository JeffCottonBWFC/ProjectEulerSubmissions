#include <iostream>
#include <math.h>
#include "mVector.h"

//Problem 10 (COMPLETE)
//The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below two million.

//NOTES
//o Use Sieve of Sundaram from Problem 7

//Generate Primes (Sieve of Sundaram)
MVector GeneratePrimes(int MaxNumber){
	int k = (MaxNumber-2) / 2;
	MVector IntegerList(k);
	MVector PrimesList(1);
	
	//Generate vector of 1 to MaxNumber
	for(int i = 0; i < k; i++){
		IntegerList[i] = i+1;
	}
	
	//Apply Sundaram conditions
	for(int i=1; i<=k; i++){
		for(int j=i; j <= (k-i)/(2*i+1); j++){
			IntegerList[i + j + 2*i*j - 1] = 0;
		}
	}
	
	//Save rescaled integers to PrimeList
	int IndexCounter = 1;
	
	for(int i = 1; i < k+1; i++){
		if(IntegerList[i-1] != 0){
			PrimesList.resizePlusOne();
			PrimesList[IndexCounter] = 2 * IntegerList[i-1] + 1;
			IndexCounter++;
		}
	}
	
	//Append 2 to start of PrimesList (Not generated by Sundaram Algorithm)
	PrimesList[0] = 2;
	
	return PrimesList;
}

long PrimesSummation(int SumToLessThan){
	//Declares (PrimesSum as long as int only stores up to 2.1 bil)
	MVector PrimesList;
	long PrimesSum = 0;
	
	//Generate Primes
	PrimesList = GeneratePrimes(SumToLessThan);
	
	//Sum primes
	for(int i = 0;  i < PrimesList.size(); i++){
		PrimesSum += PrimesList[i];
	}
	
	return PrimesSum;
}

int main() {
	long PrimesSum = 0;
	
	//Change to alter the max prime to sum to.
	int SumToLessThan = 2000000;
	
	//Function Call
	PrimesSum = PrimesSummation(SumToLessThan);
	
	//Ouput to user
	std::cout << PrimesSum << "\n";
}
